@page "/dashboard"
@using AuthDemoYT.Client.Models
@using Microsoft.FluentUI.AspNetCore.Components
@using AuthDemoYT.Client.Helpers
@rendermode InteractiveServer

@inject IDashboardService DashboardService

<div class="container mt-3">
    <h3>Rocket Dashboard</h3>
    <div class="row">
        <div class="col-md-3">
            <DashboardCard Title="Total Users" Value="@DashboardData.TotalUsers" IconClass="bi bi-people" CardClass="text-dark bg-primary-subtle" />
        </div>
        <div class="col-md-3">
            <DashboardCard Title="Active Sesstions" Value="@DashboardData.ActiveSessions" IconClass="bi bi-activity" CardClass="text-dark bg-success-subtle" />
        </div>
        <div class="col-md-3">
            <DashboardCard Title="New Signups" Value="@DashboardData.NewSignups" IconClass="bi bi-person-plus" CardClass="text-dark bg-warning-subtle" />
        </div>
        <div class="col-md-3">
            <DashboardCard Title="Errors" Value="@DashboardData.ErrorCount" IconClass="bi bi-exclamation-triangle" CardClass="text-light bg-danger" />
        </div>
    </div>

 <h4>Recent Orders</h4>
<FluentDataGrid TGridItem="Order"
                Items="@recentOrders"
                Class="mt-3"
                Pagination="@pagination"
                Virtualize="false">
    <PropertyColumn Property="@(o => o.Id)" Sortable="true" Align="Align.Start" Tooltip="true" />
    <PropertyColumn Property="@(o => o.CustomerName)" Sortable="true" Align="Align.Start" Tooltip="true" Title="Customer Name" />
    <PropertyColumn Property="@(o => o.Date.ToString())" 
        Sortable="true" 
        Align="Align.Start" 
        Tooltip="true"  
        Title="Sale Date"
        />
    <PropertyColumn Property="@(o => o.Total)" Sortable="true" Align="Align.Start" Tooltip="true" />

  </FluentDataGrid>
</div>
<FluentPaginator State="@pagination" />
@code {
   
    // Sample recent orders
    private DashboardData DashboardData = new DashboardData();
    private IQueryable<Order>? recentOrders; 
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
           
        DashboardData = await DashboardService.GetDashboardDataAsync();
        recentOrders = (DashboardData.RecentOrders).AsQueryable();
        
    }

}
